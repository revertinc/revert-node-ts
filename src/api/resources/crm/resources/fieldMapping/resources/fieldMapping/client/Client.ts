/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../../../environments";
import * as core from "../../../../../../../../core";
import * as RevertRevertApi from "../../../../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../../../../../serialization";
import * as errors from "../../../../../../../../errors";

export declare namespace FieldMapping {
    interface Options {
        environment?: core.Supplier<environments.RevertRevertApiEnvironment | string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class FieldMapping {
    constructor(protected readonly _options: FieldMapping.Options = {}) {}

    /**
     * Get field mappings for a connection
     * @throws {@link RevertRevertApi.common.UnAuthorizedError}
     * @throws {@link RevertRevertApi.common.InternalServerError}
     */
    public async getFieldMapping(
        request: RevertRevertApi.crm.fieldMapping.GetFieldMappingRequest,
        requestOptions?: FieldMapping.RequestOptions
    ): Promise<RevertRevertApi.crm.fieldMapping.GetFieldMappingResponse> {
        const { xRevertApiToken, xRevertTId, xRevertTToken, xApiVersion } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.RevertRevertApiEnvironment.Production,
                "/crm/field-mapping"
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk",
                "X-Fern-SDK-Version": "0.0.579",
                "x-revert-api-token": xRevertApiToken != null ? xRevertApiToken : undefined,
                "x-revert-t-id": xRevertTId,
                "x-revert-t-token": xRevertTToken != null ? xRevertTToken : undefined,
                "x-api-version": xApiVersion != null ? xApiVersion : undefined,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.crm.fieldMapping.GetFieldMappingResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new RevertRevertApi.common.UnAuthorizedError(
                        await serializers.common.BaseError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new RevertRevertApi.common.InternalServerError(
                        await serializers.common.BaseError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RevertRevertApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RevertRevertApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RevertRevertApiTimeoutError();
            case "unknown":
                throw new errors.RevertRevertApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Create field mappings for a connection
     * @throws {@link RevertRevertApi.common.UnAuthorizedError}
     * @throws {@link RevertRevertApi.common.InternalServerError}
     * @throws {@link RevertRevertApi.common.NotFoundError}
     */
    public async createFieldMapping(
        request: RevertRevertApi.crm.fieldMapping.CreateFieldMappingRequest,
        requestOptions?: FieldMapping.RequestOptions
    ): Promise<RevertRevertApi.crm.fieldMapping.CreateFieldMappingResponse> {
        const { xRevertApiToken, xRevertTId, xRevertTToken, xApiVersion, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ??
                    environments.RevertRevertApiEnvironment.Production,
                "/crm/field-mapping"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "sdk",
                "X-Fern-SDK-Version": "0.0.579",
                "x-revert-api-token": xRevertApiToken != null ? xRevertApiToken : undefined,
                "x-revert-t-id": xRevertTId,
                "x-revert-t-token": xRevertTToken != null ? xRevertTToken : undefined,
                "x-api-version": xApiVersion != null ? xApiVersion : undefined,
            },
            contentType: "application/json",
            body: await serializers.crm.fieldMapping.CreateFieldMappingRequestBody.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return await serializers.crm.fieldMapping.CreateFieldMappingResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new RevertRevertApi.common.UnAuthorizedError(
                        await serializers.common.BaseError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 500:
                    throw new RevertRevertApi.common.InternalServerError(
                        await serializers.common.BaseError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                case 404:
                    throw new RevertRevertApi.common.NotFoundError(
                        await serializers.common.BaseError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        })
                    );
                default:
                    throw new errors.RevertRevertApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.RevertRevertApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.RevertRevertApiTimeoutError();
            case "unknown":
                throw new errors.RevertRevertApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
