/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Revert from "../../../../../../api";
import * as core from "../../../../../../core";

export const App: core.serialization.ObjectSchema<serializers.common.App.Raw, Revert.common.App> =
    core.serialization.object({
        id: core.serialization.string(),
        tpId: core.serialization.property(
            "tp_id",
            core.serialization.lazy(async () => (await import("../../../../..")).common.Tpid)
        ),
        scope: core.serialization.list(core.serialization.string()).optional(),
        appClientId: core.serialization.property("app_client_id", core.serialization.string().optional()),
        appClientSecret: core.serialization.property("app_client_secret", core.serialization.string().optional()),
        ownerAccountPublicToken: core.serialization.property("owner_account_public_token", core.serialization.string()),
        account: core.serialization.lazyObject(async () => (await import("../../../../..")).common.Account).optional(),
        connections: core.serialization
            .list(core.serialization.lazyObject(async () => (await import("../../../../..")).common.Connection))
            .optional(),
        isRevertApp: core.serialization.property("is_revert_app", core.serialization.boolean()),
    });

export declare namespace App {
    interface Raw {
        id: string;
        tp_id: serializers.common.Tpid.Raw;
        scope?: string[] | null;
        app_client_id?: string | null;
        app_client_secret?: string | null;
        owner_account_public_token: string;
        account?: serializers.common.Account.Raw | null;
        connections?: serializers.common.Connection.Raw[] | null;
        is_revert_app: boolean;
    }
}
